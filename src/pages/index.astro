---

---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>Astro</title>
	</head>
	<body>
		<div class="wrapper">
		<header class="header-group">
			
		<h1>Astro</h1>
		</header>
		<div class="paper-group">
			<h2>Paper</h2>
			<canvas class="paper" id="paper" data-resize="true"></canvas>
		</div>
		<div class="map-group">
			<h2>Map</h2>
		<div style="width: 800px; height:505.62px;" id="map"></div>
		</div>	
	</div>
	</body>
</html>

<style>
	body{
		font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
		color: oklch(100deg 20% 20%);
	}
	.wrapper {
		display: grid;
		grid-template-columns: auto auto-fit(minmax(300px, 1fr));
		grid-auto-rows: auto;
		grit-autoflow: column;
		padding: var(--space-2);
		& .header-group{
			background-color: #FFA370;
			padding-inline: 3rem;
			display: flex;
			align-items: center;
			justify-content: space-between;
		}
		&:is(.paper-group, .map-group){
			inline-size: min(100%,600px);
		}
	}
	.paper{
		inline-size:100%;
		aspect-ratio: 2/1;
	}
</style>

<script>
	import 'mapbox-gl/dist/mapbox-gl.css';
	import map from '../scripts/map.ts';
import paper from 'paper';
	map.on('load', () => {
		paper.setup('paper');
		map.resize();
		if(map.isStyleLoaded()){
			// draw();
			const mapClone = new paper.Raster(map.getCanvas().toDataURL());
			mapClone.visible = true;
			const width = 260;
			const height = width / 2;
			const gridSize = 1;
			const spacing = 0.8;
		mapClone.on('load',()=>{			
			
			mapClone.size = new paper.Size(width,height);
			mapClone.bounds.topLeft = new paper.Point(0,0);
			const dots = new paper.Group()
			const bgLayer = new paper.Layer()
			const cloneLayer = new paper.Layer();
			cloneLayer.addChild(mapClone);
			const bg = new paper.Path.Rectangle({
			size: new paper.Size(paper.view.size),
			// position: new paper.Point(0,0),
			fillColor: new paper.Color('hsl(0,0%,100%)'),
			
		});
			
		bgLayer.addChild(cloneLayer);
		bgLayer.addChild(bg);
			bgLayer.sendToBack();

			for(let x = 0; x < mapClone.width; x++){
				for(let y = 0; y < mapClone.height; y++){
					const color = mapClone.getPixel(x,y);
					const dot = new paper.Path.Circle({
						center: new paper.Point(x,y).multiply(gridSize),
						radius: gridSize / 2 / spacing,
						fillColor: new paper.Color('black')
					})
					
					dot.scale(1 - color.gray)
					dots.addChild(dot)		
					console.log("ðŸš€ ~ mapClone.on ~ dot:", dot)
				}
			};
			// dots.addChild(bgLayer)
			
			bgLayer.sendToBack();
			dots.bounds = paper.view.bounds
			if(paper.view.update()){
				console.log("paper updated")
				//Dom elements
				const btnWrapper = document.querySelector('.header-group');
				const name = "map"
				const btn = document.createElement('button');
				btn.textContent = 'Download';
				btn.addEventListener('click', ()=>{
					paper.view.element.toBlob((blob)=>{
						const png = new Blob([blob as BlobPart], {type: 'image/png'});
						const url = URL.createObjectURL(png);
						const a = document.createElement('a');
					a.href = url;
					a.download = name;
					a.click();
					URL.revokeObjectURL(url);
					a.remove()
					});
				});
				btnWrapper?.appendChild(btn)
			}
	})
		}
	})

	function draw(){
		const mapClone = new paper.Raster(map.getCanvas().toDataURL());
		mapClone.size = new paper.Size(120,60);
		mapClone.bounds.topLeft = new paper.Point(0,0);
		new paper.Path.Circle({
			center: paper.view.center,
			radius: 20,
			fillColor: new paper.Color(1, 0, 0, 0.5),
	})
}

function downloadSVG(svg:SVGAElement,name:string){
	const svgString = new XMLSerializer().serializeToString(svg);
	const blob = new Blob([svgString], {type: 'image/svg+xml'});
	const url = URL.createObjectURL(blob);
	const a = document.createElement('a');
	a.href = url;
	a.download = name;
	a.click();
}

</script>